"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ drone-flight-predictor
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–µ—Ç–∞ –ë–ü–õ–ê
"""

import requests
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import time
import json

class DronePredictor:
    def __init__(self, api_url="http://localhost:8000"):
        self.api_url = api_url
        self.check_api_health()
    
    def check_api_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
        try:
            response = requests.get(f"{self.api_url}/predict/health")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']}")
                print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {data['model_loaded']}")
            else:
                raise Exception(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            raise
    
    def predict_next_point(self, points):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
        if len(points) != 5:
            raise ValueError("–ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 5 —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        
        payload = {
            "points": [
                {"x": p[0], "y": p[1], "z": p[2], "t": p[3]} 
                for p in points
            ]
        }
        
        response = requests.post(f"{self.api_url}/predict/", json=payload)
        
        if response.status_code == 200:
            result = response.json()
            return [result['x'], result['y'], result['z'], result['t']]
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {response.text}")
    
    def predict_trajectory(self, initial_points, steps=10):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥"""
        trajectory = list(initial_points)
        
        print(f"üöÅ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ {steps} —à–∞–≥–æ–≤...")
        
        for i in range(steps):
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–æ—á–µ–∫
            last_5_points = trajectory[-5:]
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
            next_point = self.predict_next_point(last_5_points)
            trajectory.append(next_point)
            
            print(f"–®–∞–≥ {i+1}: x={next_point[0]:.2f}, y={next_point[1]:.2f}, z={next_point[2]:.2f}, t={next_point[3]:.2f}")
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        
        return trajectory
    
    def visualize_trajectory(self, trajectory, title="–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –ø–æ–ª–µ—Ç–∞ –ë–ü–õ–ê"):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 3D —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
        trajectory = np.array(trajectory)
        
        fig = plt.figure(figsize=(12, 8))
        ax = fig.add_subplot(111, projection='3d')
        
        # –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏ (–∑–µ–ª–µ–Ω—ã–µ)
        ax.scatter(trajectory[:5, 0], trajectory[:5, 1], trajectory[:5, 2], 
                  c='green', s=100, alpha=0.8, label='–ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏')
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (–∫—Ä–∞—Å–Ω—ã–µ)
        if len(trajectory) > 5:
            ax.scatter(trajectory[5:, 0], trajectory[5:, 1], trajectory[5:, 2], 
                      c='red', s=60, alpha=0.6, label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏')
        
        # –õ–∏–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        ax.plot(trajectory[:, 0], trajectory[:, 1], trajectory[:, 2], 
               'b-', alpha=0.5, linewidth=2, label='–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è')
        
        ax.set_xlabel('X (–º)')
        ax.set_ylabel('Y (–º)')
        ax.set_zlabel('Z (–º)')
        ax.set_title(title)
        ax.legend()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig('demo_trajectory.png', dpi=300, bbox_inches='tight')
        plt.show()
        print("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'demo_trajectory.png'")

def create_demo_trajectories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
    trajectories = {
        "–õ–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ": [
            [0.0, 0.0, 10.0, 0.0],
            [1.0, 1.0, 10.5, 1.0],
            [2.0, 2.0, 11.0, 2.0],
            [3.0, 3.0, 11.5, 3.0],
            [4.0, 4.0, 12.0, 4.0],
        ],
        "–ö—Ä—É–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ": [
            [5.0, 0.0, 15.0, 0.0],
            [4.5, 2.2, 15.2, 1.0],
            [3.5, 4.0, 15.4, 2.0],
            [1.5, 4.8, 15.6, 3.0],
            [-0.5, 4.5, 15.8, 4.0],
        ],
        "–°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ": [
            [0.0, 0.0, 20.0, 0.0],
            [1.0, 0.8, 19.8, 1.0],
            [2.0, 1.4, 19.6, 2.0],
            [3.0, 1.8, 19.4, 3.0],
            [4.0, 1.9, 19.2, 4.0],
        ]
    }
    return trajectories

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÅ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –ü–û–õ–ï–¢–ê –ë–ü–õ–ê ===")
    print()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
        predictor = DronePredictor()
        print()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        demo_trajectories = create_demo_trajectories()
        
        for name, initial_points in demo_trajectories.items():
            print(f"üìç === {name.upper()} ===")
            print("–ò—Å—Ö–æ–¥–Ω—ã–µ 5 —Ç–æ—á–µ–∫:")
            for i, point in enumerate(initial_points):
                print(f"  –¢–æ—á–∫–∞ {i+1}: x={point[0]:.1f}, y={point[1]:.1f}, z={point[2]:.1f}, t={point[3]:.1f}")
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            full_trajectory = predictor.predict_trajectory(initial_points, steps=5)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            predictor.visualize_trajectory(full_trajectory, f"{name} - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ë–ü–õ–ê")
            print()
            
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            print()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        print("üîß === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===")
        try:
            predictor.predict_next_point([[1, 2, 3, 4]])  # –¢–æ–ª—å–∫–æ 1 —Ç–æ—á–∫–∞
        except ValueError as e:
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
        
        print()
        print("üéâ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===")
        print("–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print()
        print("üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
        print("  ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–∏ –ø–æ 5 –ø—Ä–µ–¥—ã–¥—É—â–∏–º")
        print("  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥")
        print("  ‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π")
        print("  ‚úÖ REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è")
        print("  ‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (MAE < 0.07)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --host 0.0.0.0 --port 8000")

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"\n{'='*50}")
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print(f"{'='*50}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print("STDOUT:")
        print(result.stdout)
    
    if result.stderr:
        print("STDERR:")
        print(result.stderr)
    
    if result.returncode != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {description}")
        return False
    else:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {description}")
        return True

def setup_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    dirs = [
        "data/processed",
        "training/checkpoints",
        "logs"
    ]
    
    for dir_path in dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

def main():
    parser = argparse.ArgumentParser(description="–ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–µ—Ç–∞ –ë–ü–õ–ê")
    parser.add_argument("--skip-data", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--skip-training", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    parser.add_argument("--skip-evaluation", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
    parser.add_argument("--skip-tests", action="store_true", help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    
    args = parser.parse_args()
    
    print("üöÅ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª–µ—Ç–∞ –ë–ü–õ–ê")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    setup_directories()
    
    # 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not args.skip_data:
        if not run_command("python data/preprocess.py", "–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
            return 1
    
    # 2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if not args.skip_training:
        if not run_command("python training/train.py", "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
            return 1
    
    # 3. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    if not args.skip_evaluation:
        if not run_command("python scripts/evaluate.py", "–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏"):
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –º–æ–¥–µ–ª–∏")
    
    # 4. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if not args.skip_tests:
        if not run_command("python tests/test_model.py", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"):
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        if not run_command("python tests/test_predict.py", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"):
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ç–µ—Å—Ç—ã API –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    print("\nüéâ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload")
    print("\n–ò–ª–∏ —Å –ø–æ–º–æ—â—å—é Docker:")
    print("docker-compose up --build")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

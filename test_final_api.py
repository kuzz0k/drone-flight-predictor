#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è API –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥—Ä–æ–Ω–∞
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {x, y, t}
"""

import requests
import json

def test_prediction_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    
    base_url = "http://localhost:8001"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...")
    health_response = requests.get(f"{base_url}/predict/health")
    if health_response.status_code == 200:
        health_data = health_response.json()
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {health_data}")
    else:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            "name": "–õ–∏–Ω–µ–π–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è",
            "description": "–¢–æ—á–∫–∏ –¥–≤–∏–∂—É—Ç—Å—è –ø–æ –ø—Ä—è–º–æ–π —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é",
            "points": [
                {"x": 0.0, "y": 0.0, "t": 0.0},
                {"x": 1.0, "y": 1.0, "t": 1.0},
                {"x": 2.0, "y": 2.0, "t": 2.0},
                {"x": 3.0, "y": 3.0, "t": 3.0},
                {"x": 4.0, "y": 4.0, "t": 4.0}
            ],
            "expected": {"x": 5.0, "y": 5.0, "t": 5.0}
        },
        {
            "name": "–£—Å–∫–æ—Ä—è—é—â–∞—è—Å—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è",
            "description": "–¢–æ—á–∫–∏ –¥–≤–∏–∂—É—Ç—Å—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º",
            "points": [
                {"x": 0.0, "y": 0.0, "t": 0.0},
                {"x": 1.0, "y": 1.0, "t": 1.0},
                {"x": 3.0, "y": 4.0, "t": 2.0},
                {"x": 6.0, "y": 9.0, "t": 3.0},
                {"x": 10.0, "y": 16.0, "t": 4.0}
            ],
            "expected": {"x": 15.0, "y": 25.0, "t": 5.0}
        },
        {
            "name": "–ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "description": "–î–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞",
            "points": [
                {"x": 0, "y": 0, "t": 0},
                {"x": 1, "y": 1, "t": 1},
                {"x": 4, "y": 4, "t": 4},
                {"x": 6, "y": 6, "t": 6},
                {"x": 7, "y": 7, "t": 7}
            ],
            "expected": {"x": 8.0, "y": 8.0, "t": 8.0}
        },
        {
            "name": "–î–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ X",
            "description": "–î–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–¥–æ–ª—å –æ—Å–∏ X",
            "points": [
                {"x": 0.0, "y": 5.0, "t": 0.0},
                {"x": 2.0, "y": 5.0, "t": 1.0},
                {"x": 4.0, "y": 5.0, "t": 2.0},
                {"x": 6.0, "y": 5.0, "t": 3.0},
                {"x": 8.0, "y": 5.0, "t": 4.0}
            ],
            "expected": {"x": 10.0, "y": 5.0, "t": 5.0}
        }
    ]
    
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...\n")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {test_case['description']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        payload = {"points": test_case["points"]}
        response = requests.post(f"{base_url}/predict/", json=payload)
        
        if response.status_code == 200:
            result = response.json()
            expected = test_case["expected"]
            
            print(f"  üìç –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: x={expected['x']:.2f}, y={expected['y']:.2f}, t={expected['t']:.2f}")
            print(f"  üéØ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: x={result['x']:.2f}, y={result['y']:.2f}, t={result['t']:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å (–¥–æ–ø—É—Å–∫ ¬±0.5)
            tolerance = 0.5
            x_ok = abs(result['x'] - expected['x']) <= tolerance
            y_ok = abs(result['y'] - expected['y']) <= tolerance
            t_ok = abs(result['t'] - expected['t']) <= tolerance
            
            if x_ok and y_ok and t_ok:
                print(f"  ‚úÖ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"  ‚ö†Ô∏è  –û–¢–ö–õ–û–ù–ï–ù–ò–ï –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
        else:
            print(f"  ‚ùå –û–®–ò–ë–ö–ê: {response.status_code} - {response.text}")
        
        print()
    
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_prediction_api()

import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import numpy as np

# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
input_points = [
    {
        "x": 0,
        "y": 0,
        "t": 0
    },
    {
        "x": 2,
        "y": 3,
        "t": 3
    },
    {
        "x": 4,
        "y": 4,
        "t": 4
    },
    {
        "x": 6,
        "y": 5,
        "t": 6
    },
    {
        "x": 7,
        "y": 8,
        "t": 9
    }
]

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞
predicted_point = {
    "x": 7.0118865966796875,
    "y": 3.2640841007232666,
    "t": 4.628136157989502
}

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤—ã numpy –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
input_array = np.array([[p["x"], p["y"], p["t"]] for p in input_points])
pred_array = np.array([predicted_point["x"], predicted_point["y"], predicted_point["t"]])

def print_analysis():
    """–¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print("üöÅ === –ê–ù–ê–õ–ò–ó –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –¢–†–ê–ï–ö–¢–û–†–ò–ò –ë–ü–õ–ê ===", flush=True)
    print(flush=True)
    
    print("üìä –í—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏:")
    for i, point in enumerate(input_points):
        print(f"  –¢–æ—á–∫–∞ {i+1}: X={point['x']:>3}, Y={point['y']:>3}, T={point['t']:>3}")
    
    print(f"\nüéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞:")
    print(f"  X = {pred_array[0]:>8.3f} –º")
    print(f"  Y = {pred_array[1]:>8.3f} –º") 
    print(f"  T = {pred_array[2]:>8.3f} —Å")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    last_input = input_points[-1]
    delta_x = pred_array[0] - last_input["x"]
    delta_y = pred_array[1] - last_input["y"]
    delta_t = pred_array[2] - last_input["t"]
    
    print(f"  ŒîX = {delta_x:>8.3f} –º (–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏)")
    print(f"  ŒîY = {delta_y:>8.3f} –º")
    print(f"  ŒîT = {delta_t:>8.3f} —Å")

def plot_trajectory():
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    fig = plt.figure(figsize=(15, 10))
    
    # 2D –≥—Ä–∞—Ñ–∏–∫ XY
    ax1 = fig.add_subplot(221)
    
    # –í—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏
    ax1.scatter(input_array[:, 0], input_array[:, 1], 
               c='blue', s=100, alpha=0.8, label='–í—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏', marker='o')
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞
    ax1.scatter(pred_array[0], pred_array[1], 
               c='red', s=150, alpha=0.9, label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ', marker='^')
    
    # –°–æ–µ–¥–∏–Ω—è–µ–º –ª–∏–Ω–∏–µ–π
    ax1.plot(input_array[:, 0], input_array[:, 1], 
            'b--', alpha=0.6, linewidth=2)
    
    # –õ–∏–Ω–∏—è –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
    last_point = input_array[-1]
    ax1.plot([last_point[0], pred_array[0]], 
            [last_point[1], pred_array[1]], 
            'r-', linewidth=3, alpha=0.8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–æ—á–µ–∫
    for i, point in enumerate(input_points):
        ax1.annotate(f'{i+1}', (point["x"], point["y"]), 
                    xytext=(5, 5), textcoords='offset points', fontsize=10)
    ax1.annotate('PRED', (pred_array[0], pred_array[1]), 
                xytext=(5, 5), textcoords='offset points', fontsize=10, color='red')
    
    ax1.set_xlabel('X (–º)')
    ax1.set_ylabel('Y (–º)')
    ax1.set_title('–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è XY')
    ax1.grid(True, alpha=0.3)
    ax1.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    ax2 = fig.add_subplot(222)
    t_values = [p["t"] for p in input_points]
    x_values = [p["x"] for p in input_points]
    
    ax2.plot(t_values, x_values, 'bo-', linewidth=2, markersize=8, label='X –≤—Ö–æ–¥–Ω—ã–µ')
    ax2.plot(pred_array[2], pred_array[0], 'r^', markersize=12, label='X –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
    ax2.plot([t_values[-1], pred_array[2]], [x_values[-1], pred_array[0]], 'r--', alpha=0.7)
    
    ax2.set_xlabel('–í—Ä–µ–º—è (—Å)')
    ax2.set_ylabel('X (–º)')
    ax2.set_title('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
    ax2.grid(True, alpha=0.3)
    ax2.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã Y –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    ax3 = fig.add_subplot(223)
    y_values = [p["y"] for p in input_points]
    
    ax3.plot(t_values, y_values, 'go-', linewidth=2, markersize=8, label='Y –≤—Ö–æ–¥–Ω—ã–µ')
    ax3.plot(pred_array[2], pred_array[1], 'r^', markersize=12, label='Y –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
    ax3.plot([t_values[-1], pred_array[2]], [y_values[-1], pred_array[1]], 'r--', alpha=0.7)
    
    ax3.set_xlabel('–í—Ä–µ–º—è (—Å)')
    ax3.set_ylabel('Y (–º)')
    ax3.set_title('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –≤–æ –≤—Ä–µ–º–µ–Ω–∏')
    ax3.grid(True, alpha=0.3)
    ax3.legend()
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    ax4 = fig.add_subplot(224)
    steps = list(range(len(input_points)))
    
    ax4.plot(steps, t_values, 'co-', linewidth=2, markersize=8, label='T –≤—Ö–æ–¥–Ω—ã–µ')
    ax4.plot(len(steps), pred_array[2], 'r^', markersize=12, label='T –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
    ax4.plot([steps[-1], len(steps)], [t_values[-1], pred_array[2]], 'r--', alpha=0.7)
    
    ax4.set_xlabel('–®–∞–≥')
    ax4.set_ylabel('–í—Ä–µ–º—è (—Å)')
    ax4.set_title('–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    ax4.grid(True, alpha=0.3)
    ax4.legend()
    
    plt.tight_layout()
    plt.savefig('trajectory_prediction.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'trajectory_prediction.png'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_analysis()
    print("\nüìä –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫...")
    plot_trajectory()
    print("\nüéâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
